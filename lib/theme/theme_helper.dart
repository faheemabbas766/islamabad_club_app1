import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      colorScheme: colorScheme,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(
              10,
            ),
          ),
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Color(0XFFFFFFFF),
          shape: RoundedRectangleBorder(
            side: BorderSide(
              color: appTheme.amber600,
              width: 1,
            ),
            borderRadius: BorderRadius.circular(
              8,
            ),
          ),
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateProperty.all<Color>(appTheme.amber600),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        checkColor: MaterialStateProperty.all<Color>(appTheme.amber600),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      textTheme: TextTheme(
        bodyMedium: TextStyle(
          color: appTheme.black90002,
          fontSize: getFontSize(
            14,
          ),
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: colorScheme.onSecondaryContainer,
          fontSize: getFontSize(
            9,
          ),
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        labelMedium: TextStyle(
          color: appTheme.gray500,
          fontSize: getFontSize(
            10,
          ),
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w500,
        ),
        bodyLarge: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: getFontSize(
            16,
          ),
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w400,
        ),
        titleSmall: TextStyle(
          color: appTheme.black90002,
          fontSize: getFontSize(
            14,
          ),
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w500,
        ),
        labelLarge: TextStyle(
          color: colorScheme.primary,
          fontSize: getFontSize(
            12,
          ),
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w600,
        ),
        headlineMedium: TextStyle(
          color: appTheme.gray100,
          fontSize: getFontSize(
            26,
          ),
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.black90001,
          fontSize: getFontSize(
            16,
          ),
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w600,
        ),
        displayMedium: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: getFontSize(
            40,
          ),
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w700,
        ),
        labelSmall: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            9,
          ),
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            20,
          ),
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w600,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(
            25,
          ),
          fontFamily: 'Red Hat Display',
          fontWeight: FontWeight.w700,
        ),
        displaySmall: TextStyle(
          color: colorScheme.primaryContainer.withOpacity(1),
          fontSize: getFontSize(
            34,
          ),
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w600,
        ),
      ),
      visualDensity: VisualDensity.standard,
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    background: Color(0X7FFF0202),
    error: Color(0X0A192038),
    errorContainer: Color(0XFF168AFF),
    inversePrimary: Color(0X7FFF0202),
    inverseSurface: Color(0X0A192038),
    onBackground: Color(0XABFFFFFF),
    onError: Color(0XFFFEBD11),
    onErrorContainer: Color(0X0A121212),
    onInverseSurface: Color(0XFFFEBD11),
    onPrimary: Color(0X0A192038),
    onPrimaryContainer: Color(0XABFFFFFF),
    onSecondary: Color(0XABFFFFFF),
    onSecondaryContainer: Color(0XFF4F4F4F),
    onSurface: Color(0XABFFFFFF),
    onSurfaceVariant: Color(0XFF4F4F4F),
    onTertiary: Color(0XABFFFFFF),
    onTertiaryContainer: Color(0XFF4F4F4F),
    outline: Color(0X0A192038),
    outlineVariant: Color(0X7FFF0202),
    primary: Color(0XFFFEBD11),
    primaryContainer: Color(0X7FFF0202),
    scrim: Color(0X7FFF0202),
    secondary: Color(0X7FFF0202),
    secondaryContainer: Color(0X470A0A0A),
    shadow: Color(0X0A192038),
    surface: Color(0X7FFF0202),
    surfaceTint: Color(0X0A192038),
    surfaceVariant: Color(0X470A0A0A),
    tertiary: Color(0X7FFF0202),
    tertiaryContainer: Color(0X470A0A0A),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber600 => Color(0XFFFCB900);
  Color get amber700 => Color(0XFFDF9F00);
  Color get amberA200 => Color(0XFFFFD33C);
  // Black
  Color get black900 => Color(0XFF190600);
  Color get black90001 => Color(0XFF0F0F0F);
  Color get black90002 => Color(0XFF000000);
  Color get black90077 => Color(0X77101011);
  // BlueGray
  Color get blueGray100 => Color(0XFFD6D6D6);
  Color get blueGray10001 => Color(0XFFD1D1D1);
  Color get blueGray400 => Color(0XFF878787);
  Color get blueGray40001 => Color(0XFF888888);
  Color get blueGray900 => Color(0XFF252836);
  Color get blueGray90001 => Color(0XFF333333);
  // Cyan
  Color get cyan400 => Color(0XFF12CDD9);
  // Gray
  Color get gray100 => Color(0XFFF2F4F6);
  Color get gray200 => Color(0XFFEDEDED);
  Color get gray20001 => Color(0XFFECECEC);
  Color get gray20002 => Color(0XFFEBEBEF);
  Color get gray20003 => Color(0XFFE8E8E6);
  Color get gray400 => Color(0XFFC9C5C4);
  Color get gray40001 => Color(0XFFBDBDBD);
  Color get gray50 => Color(0XFFF5F5FF);
  Color get gray500 => Color(0XFF92929D);
  Color get gray50001 => Color(0XFF9D9693);
  Color get gray5001 => Color(0XFFFCFCFC);
  Color get gray600 => Color(0XFF808080);
  Color get gray60001 => Color(0XFF696974);
  Color get gray900 => Color(0XFF222222);
  Color get gray90001 => Color(0XFF4B0606);
  Color get gray90002 => Color(0XFF1F1D2C);
  Color get gray90003 => Color(0XFF1F1D2B);
  // GrayCc
  Color get gray300Cc => Color(0XCCDFDFDF);
  // Grayf
  Color get gray9007f => Color(0X7F1E1E1E);
  // LightGreen
  Color get lightGreen400 => Color(0XFF90BE6D);
  // Orange
  Color get orange600 => Color(0XFFFF8700);
  // Red
  Color get red500 => Color(0XFFF94144);
  // Yellow
  Color get yellow70019 => Color(0X19FCBD21);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
